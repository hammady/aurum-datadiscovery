# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_joinpathselection')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_joinpathselection')
    _joinpathselection = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_joinpathselection', [dirname(__file__)])
        except ImportError:
            import _joinpathselection
            return _joinpathselection
        try:
            _mod = imp.load_module('_joinpathselection', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _joinpathselection = swig_import_helper()
    del swig_import_helper
else:
    import _joinpathselection
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class JP(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JP, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tables"] = _joinpathselection.JP_tables_set
    __swig_getmethods__["tables"] = _joinpathselection.JP_tables_get
    if _newclass:
        tables = _swig_property(_joinpathselection.JP_tables_get, _joinpathselection.JP_tables_set)
    __swig_setmethods__["jpreds"] = _joinpathselection.JP_jpreds_set
    __swig_getmethods__["jpreds"] = _joinpathselection.JP_jpreds_get
    if _newclass:
        jpreds = _swig_property(_joinpathselection.JP_jpreds_get, _joinpathselection.JP_jpreds_set)
    __swig_setmethods__["proj_cols"] = _joinpathselection.JP_proj_cols_set
    __swig_getmethods__["proj_cols"] = _joinpathselection.JP_proj_cols_get
    if _newclass:
        proj_cols = _swig_property(_joinpathselection.JP_proj_cols_get, _joinpathselection.JP_proj_cols_set)

    def __init__(self):
        this = _joinpathselection.new_JP()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _joinpathselection.delete_JP
    __del__ = lambda self: None
JP_swigregister = _joinpathselection.JP_swigregister
JP_swigregister(JP)

class Cell(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cell, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tid"] = _joinpathselection.Cell_tid_set
    __swig_getmethods__["tid"] = _joinpathselection.Cell_tid_get
    if _newclass:
        tid = _swig_property(_joinpathselection.Cell_tid_get, _joinpathselection.Cell_tid_set)
    __swig_setmethods__["x"] = _joinpathselection.Cell_x_set
    __swig_getmethods__["x"] = _joinpathselection.Cell_x_get
    if _newclass:
        x = _swig_property(_joinpathselection.Cell_x_get, _joinpathselection.Cell_x_set)
    __swig_setmethods__["y"] = _joinpathselection.Cell_y_set
    __swig_getmethods__["y"] = _joinpathselection.Cell_y_get
    if _newclass:
        y = _swig_property(_joinpathselection.Cell_y_get, _joinpathselection.Cell_y_set)

    def __init__(self, *args):
        this = _joinpathselection.new_Cell(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, o: 'Cell') -> "bool":
        return _joinpathselection.Cell___eq__(self, o)

    def __lt__(self, o: 'Cell') -> "bool":
        return _joinpathselection.Cell___lt__(self, o)
    __swig_destroy__ = _joinpathselection.delete_Cell
    __del__ = lambda self: None
Cell_swigregister = _joinpathselection.Cell_swigregister
Cell_swigregister(Cell)

class JPSelection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JPSelection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JPSelection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _joinpathselection.new_JPSelection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def select_join_path(self, K: 'int'=1) -> "std::string":
        return _joinpathselection.JPSelection_select_join_path(self, K)

    def budget_clean(self, B: 'int', jp_idx: 'int') -> "std::string":
        return _joinpathselection.JPSelection_budget_clean(self, B, jp_idx)
    __swig_destroy__ = _joinpathselection.delete_JPSelection
    __del__ = lambda self: None
JPSelection_swigregister = _joinpathselection.JPSelection_swigregister
JPSelection_swigregister(JPSelection)

class Stats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["numeric"] = _joinpathselection.Stats_numeric_set
    __swig_getmethods__["numeric"] = _joinpathselection.Stats_numeric_get
    if _newclass:
        numeric = _swig_property(_joinpathselection.Stats_numeric_get, _joinpathselection.Stats_numeric_set)
    __swig_setmethods__["mean"] = _joinpathselection.Stats_mean_set
    __swig_getmethods__["mean"] = _joinpathselection.Stats_mean_get
    if _newclass:
        mean = _swig_property(_joinpathselection.Stats_mean_get, _joinpathselection.Stats_mean_set)
    __swig_setmethods__["var"] = _joinpathselection.Stats_var_set
    __swig_getmethods__["var"] = _joinpathselection.Stats_var_get
    if _newclass:
        var = _swig_property(_joinpathselection.Stats_var_get, _joinpathselection.Stats_var_set)
    __swig_setmethods__["minn"] = _joinpathselection.Stats_minn_set
    __swig_getmethods__["minn"] = _joinpathselection.Stats_minn_get
    if _newclass:
        minn = _swig_property(_joinpathselection.Stats_minn_get, _joinpathselection.Stats_minn_set)
    __swig_setmethods__["maxx"] = _joinpathselection.Stats_maxx_set
    __swig_getmethods__["maxx"] = _joinpathselection.Stats_maxx_get
    if _newclass:
        maxx = _swig_property(_joinpathselection.Stats_maxx_get, _joinpathselection.Stats_maxx_set)
    __swig_setmethods__["range"] = _joinpathselection.Stats_range_set
    __swig_getmethods__["range"] = _joinpathselection.Stats_range_get
    if _newclass:
        range = _swig_property(_joinpathselection.Stats_range_get, _joinpathselection.Stats_range_set)
    __swig_setmethods__["num"] = _joinpathselection.Stats_num_set
    __swig_getmethods__["num"] = _joinpathselection.Stats_num_get
    if _newclass:
        num = _swig_property(_joinpathselection.Stats_num_get, _joinpathselection.Stats_num_set)

    def __init__(self):
        this = _joinpathselection.new_Stats()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _joinpathselection.delete_Stats
    __del__ = lambda self: None
Stats_swigregister = _joinpathselection.Stats_swigregister
Stats_swigregister(Stats)

class Table(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Table, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Table, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _joinpathselection.new_Table(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["id"] = _joinpathselection.Table_id_set
    __swig_getmethods__["id"] = _joinpathselection.Table_id_get
    if _newclass:
        id = _swig_property(_joinpathselection.Table_id_get, _joinpathselection.Table_id_set)
    __swig_setmethods__["name"] = _joinpathselection.Table_name_set
    __swig_getmethods__["name"] = _joinpathselection.Table_name_get
    if _newclass:
        name = _swig_property(_joinpathselection.Table_name_get, _joinpathselection.Table_name_set)
    __swig_setmethods__["headers"] = _joinpathselection.Table_headers_set
    __swig_getmethods__["headers"] = _joinpathselection.Table_headers_get
    if _newclass:
        headers = _swig_property(_joinpathselection.Table_headers_get, _joinpathselection.Table_headers_set)
    __swig_setmethods__["cells"] = _joinpathselection.Table_cells_set
    __swig_getmethods__["cells"] = _joinpathselection.Table_cells_get
    if _newclass:
        cells = _swig_property(_joinpathselection.Table_cells_get, _joinpathselection.Table_cells_set)
    __swig_setmethods__["num_row"] = _joinpathselection.Table_num_row_set
    __swig_getmethods__["num_row"] = _joinpathselection.Table_num_row_get
    if _newclass:
        num_row = _swig_property(_joinpathselection.Table_num_row_get, _joinpathselection.Table_num_row_set)
    __swig_setmethods__["num_col"] = _joinpathselection.Table_num_col_set
    __swig_getmethods__["num_col"] = _joinpathselection.Table_num_col_get
    if _newclass:
        num_col = _swig_property(_joinpathselection.Table_num_col_get, _joinpathselection.Table_num_col_set)
    __swig_setmethods__["primary_key_column"] = _joinpathselection.Table_primary_key_column_set
    __swig_getmethods__["primary_key_column"] = _joinpathselection.Table_primary_key_column_get
    if _newclass:
        primary_key_column = _swig_property(_joinpathselection.Table_primary_key_column_get, _joinpathselection.Table_primary_key_column_set)
    __swig_setmethods__["stats_info"] = _joinpathselection.Table_stats_info_set
    __swig_getmethods__["stats_info"] = _joinpathselection.Table_stats_info_get
    if _newclass:
        stats_info = _swig_property(_joinpathselection.Table_stats_info_get, _joinpathselection.Table_stats_info_set)

    def __lt__(self, o: 'Table') -> "int":
        return _joinpathselection.Table___lt__(self, o)
    __swig_destroy__ = _joinpathselection.delete_Table
    __del__ = lambda self: None
Table_swigregister = _joinpathselection.Table_swigregister
Table_swigregister(Table)

class Corpus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Corpus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Corpus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _joinpathselection.new_Corpus(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def count_multi_column_table(self) -> "int":
        return _joinpathselection.Corpus_count_multi_column_table(self)

    def count_table(self) -> "int":
        return _joinpathselection.Corpus_count_table(self)

    def get_table(self, arg2: 'int') -> "Table *":
        return _joinpathselection.Corpus_get_table(self, arg2)
    __swig_destroy__ = _joinpathselection.delete_Corpus
    __del__ = lambda self: None
Corpus_swigregister = _joinpathselection.Corpus_swigregister
Corpus_swigregister(Corpus)

MAX_CSV_FILE_SIZE = _joinpathselection.MAX_CSV_FILE_SIZE
class Reader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Reader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Reader, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def strNormalize(self, s: 'std::string &') -> "void":
        return _joinpathselection.Reader_strNormalize(self, s)

    def read_a_table(self, arg2: 'std::string', arg3: 'std::string') -> "Table":
        return _joinpathselection.Reader_read_a_table(self, arg2, arg3)
    __swig_destroy__ = _joinpathselection.delete_Reader
    __del__ = lambda self: None
Reader_swigregister = _joinpathselection.Reader_swigregister
Reader_swigregister(Reader)

class CSVReader(Reader):
    __swig_setmethods__ = {}
    for _s in [Reader]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSVReader, name, value)
    __swig_getmethods__ = {}
    for _s in [Reader]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSVReader, name)
    __repr__ = _swig_repr

    def read_a_table(self, arg2: 'std::string', arg3: 'std::string') -> "Table":
        return _joinpathselection.CSVReader_read_a_table(self, arg2, arg3)

    def __init__(self):
        this = _joinpathselection.new_CSVReader()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _joinpathselection.delete_CSVReader
    __del__ = lambda self: None
CSVReader_swigregister = _joinpathselection.CSVReader_swigregister
CSVReader_swigregister(CSVReader)

class Common(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Common, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Common, name)
    __repr__ = _swig_repr
    if _newclass:
        get_tokens = staticmethod(_joinpathselection.Common_get_tokens)
    else:
        get_tokens = _joinpathselection.Common_get_tokens
    if _newclass:
        jaccard_sim = staticmethod(_joinpathselection.Common_jaccard_sim)
    else:
        jaccard_sim = _joinpathselection.Common_jaccard_sim

    def __init__(self):
        this = _joinpathselection.new_Common()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _joinpathselection.delete_Common
    __del__ = lambda self: None
Common_swigregister = _joinpathselection.Common_swigregister
Common_swigregister(Common)

def Common_get_tokens(arg2: 'std::string') -> "vector< std::string >":
    return _joinpathselection.Common_get_tokens(arg2)
Common_get_tokens = _joinpathselection.Common_get_tokens

def Common_jaccard_sim(arg2: 'std::string', arg3: 'std::string') -> "double":
    return _joinpathselection.Common_jaccard_sim(arg2, arg3)
Common_jaccard_sim = _joinpathselection.Common_jaccard_sim

# This file is compatible with both classic and new-style classes.


